#include <iostream>
#include <fstream>
#include <sstream>
#include <cstddef>
#include <array>

struct vm_inst {
	std::byte instruction;
	std::byte op1;
	std::byte op2;
};

enum class VM_INST  {
	unk = 0,
	SET_OP1_FROM_OP2 = 1,
	SET_XOR = 2,
	XOR_BY_STORED = 3,
};

std::array<vm_inst, 0x54> g_vm_bytes{};

std::array<std::byte, 0x100> g_stack{};


bool process_instruction(vm_inst inst) {
	static std::byte stored_xor{};
	switch ((VM_INST)inst.instruction) {
	case VM_INST::SET_OP1_FROM_OP2:
		g_stack.at(static_cast<int>(inst.op1)) = inst.op2;
		break;
	case VM_INST::SET_XOR:
		stored_xor = g_stack.at(static_cast<int>(inst.op1));
		break;
	case VM_INST::XOR_BY_STORED:
		g_stack.at(static_cast<int>(inst.op1)) ^= stored_xor;
		break;
	default:
		return false;
	}
	return true;
}


void vm_loop() {
	for (auto inst : g_vm_bytes) {
		if (!process_instruction(inst))
			break;
	}
}

void init_vm() {
	std::ifstream fin("ram.bin", std::ios::binary);
	std::stringstream ss;
	ss << fin.rdbuf();
	fin.close();

	// just for "better" code
	std::memcpy(g_vm_bytes.data(), ss.str().data() + 255, g_vm_bytes.size() * sizeof(vm_inst));
	std::memcpy(g_stack.data(), ss.str().data(), g_stack.size());

}
int main() {
	init_vm();
	vm_loop();
	std::cout << (const char*)g_stack.data()<<std::endl;
#ifndef _DEBUG
	system("pause");
#endif
}

