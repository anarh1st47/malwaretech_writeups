#include <iostream>
#include <Windows.h>


struct sc_data_t {
    decltype(&LoadLibraryA) lla_ptr;
    decltype(&GetProcAddress) get_proc_addr_ptr;
    uint8_t* ptr;
    uint32_t size;
    sc_data_t(uint8_t arr[], int _size) {
        ptr = arr;
        size = _size;
        lla_ptr = LoadLibraryA;
        get_proc_addr_ptr = GetProcAddress;
    }
};

uint8_t shellcode[] = {
    0x55, 0x89, 0xE5, 0x81, 0xEC, 0xBC, 0x01, 0x00, 0x00, 0xC6, 0x45, 0xA8, 0x6D, 0xC6, 0x45, 0xA9, 
    0x73, 0xC6, 0x45, 0xAA, 0x76, 0xC6, 0x45, 0xAB, 0x63, 0xC6, 0x45, 0xAC, 0x72, 0xC6, 0x45, 0xAD, 
    0x74, 0xC6, 0x45, 0xAE, 0x2E, 0xC6, 0x45, 0xAF, 0x64, 0xC6, 0x45, 0xB0, 0x6C, 0xC6, 0x45, 0xB1, 
    0x6C, 0xC6, 0x45, 0xB2, 0x00, 0xC6, 0x85, 0x60, 0xFF, 0xFF, 0xFF, 0x6B, 0xC6, 0x85, 0x61, 0xFF, 
    0xFF, 0xFF, 0x65, 0xC6, 0x85, 0x62, 0xFF, 0xFF, 0xFF, 0x72, 0xC6, 0x85, 0x63, 0xFF, 0xFF, 0xFF, 
    0x6E, 0xC6, 0x85, 0x64, 0xFF, 0xFF, 0xFF, 0x65, 0xC6, 0x85, 0x65, 0xFF, 0xFF, 0xFF, 0x6C, 0xC6, 
    0x85, 0x66, 0xFF, 0xFF, 0xFF, 0x33, 0xC6, 0x85, 0x67, 0xFF, 0xFF, 0xFF, 0x32, 0xC6, 0x85, 0x68, 
    0xFF, 0xFF, 0xFF, 0x2E, 0xC6, 0x85, 0x69, 0xFF, 0xFF, 0xFF, 0x64, 0xC6, 0x85, 0x6A, 0xFF, 0xFF, 
    0xFF, 0x6C, 0xC6, 0x85, 0x6B, 0xFF, 0xFF, 0xFF, 0x6C, 0xC6, 0x85, 0x6C, 0xFF, 0xFF, 0xFF, 0x00, 
    0xC6, 0x85, 0x48, 0xFE, 0xFF, 0xFF, 0x66, 0xC6, 0x85, 0x49, 0xFE, 0xFF, 0xFF, 0x6F, 0xC6, 0x85, 
    0x4A, 0xFE, 0xFF, 0xFF, 0x70, 0xC6, 0x85, 0x4B, 0xFE, 0xFF, 0xFF, 0x65, 0xC6, 0x85, 0x4C, 0xFE, 
    0xFF, 0xFF, 0x6E, 0xC6, 0x85, 0x4D, 0xFE, 0xFF, 0xFF, 0x00, 0xC6, 0x45, 0xB4, 0x66, 0xC6, 0x45, 
    0xB5, 0x72, 0xC6, 0x45, 0xB6, 0x65, 0xC6, 0x45, 0xB7, 0x61, 0xC6, 0x45, 0xB8, 0x64, 0xC6, 0x45, 
    0xB9, 0x00, 0xC6, 0x45, 0xF4, 0x66, 0xC6, 0x45, 0xF5, 0x73, 0xC6, 0x45, 0xF6, 0x65, 0xC6, 0x45, 
    0xF7, 0x65, 0xC6, 0x45, 0xF8, 0x6B, 0xC6, 0x45, 0xF9, 0x00, 0xC6, 0x45, 0xA0, 0x66, 0xC6, 0x45, 
    0xA1, 0x63, 0xC6, 0x45, 0xA2, 0x6C, 0xC6, 0x45, 0xA3, 0x6F, 0xC6, 0x45, 0xA4, 0x73, 0xC6, 0x45,
    0xA5, 0x65, 0xC6, 0x45, 0xA6, 0x00, 0xC6, 0x45, 0x88, 0x47, 0xC6, 0x45, 0x89, 0x65, 0xC6, 0x45, 
    0x8A, 0x74, 0xC6, 0x45, 0x8B, 0x4D, 0xC6, 0x45, 0x8C, 0x6F, 0xC6, 0x45, 0x8D, 0x64, 0xC6, 0x45, 
    0x8E, 0x75, 0xC6, 0x45, 0x8F, 0x6C, 0xC6, 0x45, 0x90, 0x65, 0xC6, 0x45, 0x91, 0x46, 0xC6, 0x45, 
    0x92, 0x69, 0xC6, 0x45, 0x93, 0x6C, 0xC6, 0x45, 0x94, 0x65, 0xC6, 0x45, 0x95, 0x4E, 0xC6, 0x45, 
    0x96, 0x61, 0xC6, 0x45, 0x97, 0x6D, 0xC6, 0x45, 0x98, 0x65, 0xC6, 0x45, 0x99, 0x41, 0xC6, 0x45, 
    0x9A, 0x00, 0xC6, 0x45, 0x84, 0x72, 0xC6, 0x45, 0x85, 0x62, 0xC6, 0x45, 0x86, 0x00, 0x8B, 0x45, 
    0x08, 0x8B, 0x08, 0x89, 0x4D, 0xFC, 0x8B, 0x48, 0x04, 0x89, 0x4D, 0xBC, 0x8D, 0x4D, 0xA8, 0x51, 
    0xFF, 0x55, 0xFC, 0x89, 0x45, 0xC4, 0x8D, 0x95, 0x60, 0xFF, 0xFF, 0xFF, 0x52, 0xFF, 0x55, 0xFC, 
    0x89, 0x85, 0x7C, 0xFF, 0xFF, 0xFF, 0x8D, 0x45, 0x88, 0x50, 0x8B, 0x8D, 0x7C, 0xFF, 0xFF, 0xFF, 
    0x51, 0xFF, 0x55, 0xBC, 0x89, 0x45, 0xF0, 0x8D, 0x95, 0x48, 0xFE, 0xFF, 0xFF, 0x52, 0x8B, 0x45, 
    0xC4, 0x50, 0xFF, 0x55, 0xBC, 0x89, 0x45, 0x80, 0x8D, 0x4D, 0xF4, 0x51, 0x8B, 0x55, 0xC4, 0x52, 
    0xFF, 0x55, 0xBC, 0x89, 0x85, 0x5C, 0xFF, 0xFF, 0xFF, 0x8D, 0x45, 0xB4, 0x50, 0x8B, 0x4D, 0xC4, 
    0x51, 0xFF, 0x55, 0xBC, 0x89, 0x85, 0x70, 0xFF, 0xFF, 0xFF, 0x8D, 0x55, 0xA0, 0x52, 0x8B, 0x45, 
    0xC4, 0x50, 0xFF, 0x55, 0xBC, 0x89, 0x45, 0x9C, 0x68, 0x04, 0x01, 0x00, 0x00, 0x8D, 0x8D, 0x50,
    0xFE, 0xFF, 0xFF, 0x51, 0x6A, 0x00, 0xFF, 0x55, 0xF0, 0x8D, 0x55, 0x84, 0x52, 0x8D, 0x85, 0x50, 
    0xFE, 0xFF, 0xFF, 0x50, 0xFF, 0x55, 0x80, 0x83, 0xC4, 0x08, 0x89, 0x45, 0xC0, 0x6A, 0x00, 0x6A, 
    0x4E, 0x8B, 0x4D, 0xC0, 0x51, 0xFF, 0x95, 0x5C, 0xFF, 0xFF, 0xFF, 0x83, 0xC4, 0x0C, 0x8B, 0x55, 
    0xC0, 0x52, 0x6A, 0x01, 0x6A, 0x26, 0x8D, 0x45, 0xC8, 0x50, 0xFF, 0x95, 0x70, 0xFF, 0xFF, 0xFF, 
    0x83, 0xC4, 0x10, 0x8B, 0x4D, 0xC0, 0x51, 0xFF, 0x55, 0x9C, 0x83, 0xC4, 0x04, 0x8B, 0x55, 0x08, 
    0x8B, 0x4A, 0x0C, 0x8B, 0x7A, 0x08, 0x31, 0xD2, 0x8A, 0x44, 0x15, 0xC8, 0x30, 0x04, 0x17, 0x42, 
    0x39, 0xCA, 0x75, 0xF4, 0x89, 0xEC, 0x5D, 0xC3,
};

int main() {
    uint8_t str[36];
    str[0] = 18;
    str[1] = 36;
    str[2] = 40;
    str[3] = 52;
    str[4] = 91;
    str[5] = 35;
    str[6] = 38;
    str[7] = 32;
    str[8] = 53;
    str[9] = 55;
    str[10] = 76;
    str[11] = 40;
    str[12] = 118;
    str[13] = 38;
    str[14] = 51;
    str[15] = 55;
    str[16] = 58;
    str[17] = 39;
    str[18] = 61;
    str[19] = 110;
    str[20] = 37;
    str[21] = 72;
    str[22] = 111;
    str[23] = 60;
    str[24] = 88;
    str[25] = 58;
    str[26] = 104;
    str[27] = 44;
    str[28] = 67;
    str[29] = 115;
    str[30] = 16;
    str[31] = 14;
    str[32] = 16;
    str[33] = 107;
    str[34] = 16;
    str[35] = 111;
    auto obj_with_encrypted_string = new sc_data_t(str, sizeof(str));
    VirtualProtect((void*)&shellcode, sizeof(shellcode), PAGE_EXECUTE_READWRITE, new DWORD);
    ((int(*)(sc_data_t*))&shellcode)(obj_with_encrypted_string);
    std::cout << (const char*)str<<std::endl;
    return 0;
}